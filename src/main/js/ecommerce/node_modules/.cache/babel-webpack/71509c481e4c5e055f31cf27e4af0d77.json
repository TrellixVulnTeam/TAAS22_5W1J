{"ast":null,"code":"import _get from \"/Users/pier/Desktop/Progetto/backup taass copia/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/pier/Desktop/Progetto/backup taass copia/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/pier/Desktop/Progetto/backup taass copia/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/pier/Desktop/Progetto/backup taass copia/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"/Users/pier/Desktop/Progetto/backup taass copia/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/pier/Desktop/Progetto/backup taass copia/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Users/pier/Desktop/Progetto/backup taass copia/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/pier/Desktop/Progetto/backup taass copia/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport * as i0 from '@angular/core';\nimport { Injectable, Directive, Input, Component, Renderer2, ElementRef, Optional, HostBinding, NgModule } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { findIconDefinition as _findIconDefinition, parse, icon, counter, text } from '@fortawesome/fontawesome-svg-core';\n\nvar FaConfig = /*@__PURE__*/function () {\n  var FaConfig = function FaConfig() {\n    _classCallCheck(this, FaConfig);\n\n    /**\n     * Default prefix to use, when one is not provided with the icon name.\n     *\n     * @default 'fas'\n     */\n    this.defaultPrefix = 'fas';\n    /**\n     * Provides a fallback icon to use whilst main icon is being loaded asynchronously.\n     * When value is null, then fa-icon component will throw an error if icon input is missing.\n     * When value is not null, then the provided icon will be used as a fallback icon if icon input is missing.\n     *\n     * @default null\n     */\n\n    this.fallbackIcon = null;\n    /**\n     * Whether components should lookup icon definitions in the global icon\n     * library (the one available from\n     * `import { library } from '@fortawesome/fontawesome-svg-core')`.\n     *\n     * See https://github.com/FortAwesome/angular-fontawesome/blob/master/docs/usage/icon-library.md\n     * for detailed description of library modes.\n     *\n     * - 'unset' - Components should lookup icon definitions in the global library\n     * and emit warning if they find a definition there. This option is a default\n     * to assist existing applications with a migration. Applications are expected\n     * to switch to using {@link FaIconLibrary}.\n     * - true - Components should lookup icon definitions in the global library.\n     * Note that global icon library is deprecated and support for it will be\n     * removed. This option can be used to temporarily suppress warnings.\n     * - false - Components should not lookup icon definitions in the global\n     * library. Library will throw an error if missing icon is found in the global\n     * library.\n     *\n     * @deprecated This option is deprecated since 0.5.0. In 0.6.0 default will\n     * be changed to false. In 0.8.0 the option will be removed together with the\n     * support for the global icon library.\n     *\n     * @default false\n     */\n\n    this.globalLibrary = false;\n  };\n\n  FaConfig.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function FaConfig_Factory() {\n      return new FaConfig();\n    },\n    token: FaConfig,\n    providedIn: \"root\"\n  });\n  return FaConfig;\n}();\n\nvar FaIconLibrary = /*@__PURE__*/function () {\n  var FaIconLibrary = /*#__PURE__*/function () {\n    function FaIconLibrary() {\n      _classCallCheck(this, FaIconLibrary);\n\n      this.definitions = {};\n    }\n\n    _createClass(FaIconLibrary, [{\n      key: \"addIcons\",\n      value: function addIcons() {\n        for (var _len = arguments.length, icons = new Array(_len), _key = 0; _key < _len; _key++) {\n          icons[_key] = arguments[_key];\n        }\n\n        for (var _i = 0, _icons = icons; _i < _icons.length; _i++) {\n          var _icon = _icons[_i];\n\n          if (!(_icon.prefix in this.definitions)) {\n            this.definitions[_icon.prefix] = {};\n          }\n\n          this.definitions[_icon.prefix][_icon.iconName] = _icon;\n        }\n      }\n    }, {\n      key: \"addIconPacks\",\n      value: function addIconPacks() {\n        var _this = this;\n\n        for (var _len2 = arguments.length, packs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          packs[_key2] = arguments[_key2];\n        }\n\n        var _loop = function _loop() {\n          var pack = _packs[_i2];\n          var icons = Object.keys(pack).map(function (key) {\n            return pack[key];\n          });\n\n          _this.addIcons.apply(_this, _toConsumableArray(icons));\n        };\n\n        for (var _i2 = 0, _packs = packs; _i2 < _packs.length; _i2++) {\n          _loop();\n        }\n      }\n    }, {\n      key: \"getIconDefinition\",\n      value: function getIconDefinition(prefix, name) {\n        if (prefix in this.definitions && name in this.definitions[prefix]) {\n          return this.definitions[prefix][name];\n        }\n\n        return null;\n      }\n    }]);\n\n    return FaIconLibrary;\n  }();\n\n  FaIconLibrary.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function FaIconLibrary_Factory() {\n      return new FaIconLibrary();\n    },\n    token: FaIconLibrary,\n    providedIn: \"root\"\n  });\n  return FaIconLibrary;\n}();\n\nvar faWarnIfIconDefinitionMissing = function faWarnIfIconDefinitionMissing(iconSpec) {\n  throw new Error(\"Could not find icon with iconName=\".concat(iconSpec.iconName, \" and prefix=\").concat(iconSpec.prefix, \" in the icon library.\"));\n};\n\nvar faWarnIfIconSpecMissing = function faWarnIfIconSpecMissing() {\n  throw new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.');\n};\n/**\n * Fontawesome class list.\n * Returns classes array by props.\n */\n\n\nvar faClassList = function faClassList(props) {\n  var _classes;\n\n  var classes = (_classes = {\n    'fa-spin': props.spin,\n    'fa-pulse': props.pulse,\n    'fa-fw': props.fixedWidth,\n    'fa-border': props.border,\n    'fa-inverse': props.inverse,\n    'fa-layers-counter': props.counter,\n    'fa-flip-horizontal': props.flip === 'horizontal' || props.flip === 'both',\n    'fa-flip-vertical': props.flip === 'vertical' || props.flip === 'both'\n  }, _defineProperty(_classes, \"fa-\".concat(props.size), props.size !== null), _defineProperty(_classes, \"fa-rotate-\".concat(props.rotate), props.rotate !== null), _defineProperty(_classes, \"fa-pull-\".concat(props.pull), props.pull !== null), _defineProperty(_classes, \"fa-stack-\".concat(props.stackItemSize), props.stackItemSize != null), _classes);\n  return Object.keys(classes).map(function (key) {\n    return classes[key] ? key : null;\n  }).filter(function (key) {\n    return key;\n  });\n};\n/**\n * Returns if is IconLookup or not.\n */\n\n\nvar isIconLookup = function isIconLookup(i) {\n  return i.prefix !== undefined && i.iconName !== undefined;\n};\n/**\n * Normalizing icon spec.\n */\n\n\nvar faNormalizeIconSpec = function faNormalizeIconSpec(iconSpec, defaultPrefix) {\n  if (isIconLookup(iconSpec)) {\n    return iconSpec;\n  }\n\n  if (Array.isArray(iconSpec) && iconSpec.length === 2) {\n    return {\n      prefix: iconSpec[0],\n      iconName: iconSpec[1]\n    };\n  }\n\n  if (typeof iconSpec === 'string') {\n    return {\n      prefix: defaultPrefix,\n      iconName: iconSpec\n    };\n  }\n};\n\nvar FaStackItemSizeDirective = /*#__PURE__*/function () {\n  function FaStackItemSizeDirective() {\n    _classCallCheck(this, FaStackItemSizeDirective);\n\n    /**\n     * Specify whether icon inside {@link FaStackComponent} should be rendered in\n     * regular size (1x) or as a larger icon (2x).\n     */\n    this.stackItemSize = '1x';\n  }\n\n  _createClass(FaStackItemSizeDirective, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if ('size' in changes) {\n        throw new Error('fa-icon is not allowed to customize size when used inside fa-stack. ' + 'Set size on the enclosing fa-stack instead: <fa-stack size=\"4x\">...</fa-stack>.');\n      }\n    }\n  }]);\n\n  return FaStackItemSizeDirective;\n}();\n\nvar FaStackComponent = /*#__PURE__*/function () {\n  function FaStackComponent(renderer, elementRef) {\n    _classCallCheck(this, FaStackComponent);\n\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n  }\n\n  _createClass(FaStackComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.renderer.addClass(this.elementRef.nativeElement, 'fa-stack');\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if ('size' in changes) {\n        if (changes.size.currentValue != null) {\n          this.renderer.addClass(this.elementRef.nativeElement, \"fa-\".concat(changes.size.currentValue));\n        }\n\n        if (changes.size.previousValue != null) {\n          this.renderer.removeClass(this.elementRef.nativeElement, \"fa-\".concat(changes.size.previousValue));\n        }\n      }\n    }\n  }]);\n\n  return FaStackComponent;\n}();\n\nvar FaIconComponent = /*#__PURE__*/function () {\n  function FaIconComponent(sanitizer, config, iconLibrary, stackItem, stack) {\n    _classCallCheck(this, FaIconComponent);\n\n    this.sanitizer = sanitizer;\n    this.config = config;\n    this.iconLibrary = iconLibrary;\n    this.stackItem = stackItem;\n    this.classes = [];\n\n    if (stack != null && stackItem == null) {\n      console.error('FontAwesome: fa-icon and fa-duotone-icon elements must specify stackItemSize attribute when wrapped into ' + 'fa-stack. Example: <fa-icon stackItemSize=\"2x\"></fa-icon>.');\n    }\n  }\n\n  _createClass(FaIconComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (this.icon == null && this.config.fallbackIcon == null) {\n        return faWarnIfIconSpecMissing();\n      }\n\n      var iconToBeRendered = null;\n\n      if (this.icon == null) {\n        iconToBeRendered = this.config.fallbackIcon;\n      } else {\n        iconToBeRendered = this.icon;\n      }\n\n      if (changes) {\n        var iconDefinition = this.findIconDefinition(iconToBeRendered);\n\n        if (iconDefinition != null) {\n          var params = this.buildParams();\n          this.renderIcon(iconDefinition, params);\n        }\n      }\n    }\n    /**\n     * Programmatically trigger rendering of the icon.\n     *\n     * This method is useful, when creating {@link FaIconComponent} dynamically or\n     * changing its inputs programmatically as in these cases icon won't be\n     * re-rendered automatically.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.ngOnChanges({});\n    }\n  }, {\n    key: \"findIconDefinition\",\n    value: function findIconDefinition(i) {\n      var lookup = faNormalizeIconSpec(i, this.config.defaultPrefix);\n\n      if ('icon' in lookup) {\n        return lookup;\n      }\n\n      var definition = this.iconLibrary.getIconDefinition(lookup.prefix, lookup.iconName);\n\n      if (definition != null) {\n        return definition;\n      }\n\n      var globalDefinition = _findIconDefinition(lookup);\n\n      if (globalDefinition != null) {\n        var message = 'Global icon library is deprecated. ' + 'Consult https://github.com/FortAwesome/angular-fontawesome/blob/master/UPGRADING.md ' + 'for the migration instructions.';\n\n        if (this.config.globalLibrary === 'unset') {\n          console.error('FontAwesome: ' + message);\n        } else if (!this.config.globalLibrary) {\n          throw new Error(message);\n        }\n\n        return globalDefinition;\n      }\n\n      faWarnIfIconDefinitionMissing(lookup);\n      return null;\n    }\n  }, {\n    key: \"buildParams\",\n    value: function buildParams() {\n      var classOpts = {\n        flip: this.flip,\n        spin: this.spin,\n        pulse: this.pulse,\n        border: this.border,\n        inverse: this.inverse,\n        size: this.size || null,\n        pull: this.pull || null,\n        rotate: this.rotate || null,\n        fixedWidth: typeof this.fixedWidth === 'boolean' ? this.fixedWidth : this.config.fixedWidth,\n        stackItemSize: this.stackItem != null ? this.stackItem.stackItemSize : null\n      };\n      var parsedTransform = typeof this.transform === 'string' ? parse.transform(this.transform) : this.transform;\n      return {\n        title: this.title,\n        transform: parsedTransform,\n        classes: [].concat(_toConsumableArray(faClassList(classOpts)), _toConsumableArray(this.classes)),\n        mask: this.mask != null ? this.findIconDefinition(this.mask) : null,\n        styles: this.styles != null ? this.styles : {},\n        symbol: this.symbol,\n        attributes: {\n          role: this.a11yRole\n        }\n      };\n    }\n  }, {\n    key: \"renderIcon\",\n    value: function renderIcon(definition, params) {\n      var renderedIcon = icon(definition, params);\n      this.renderedIconHTML = this.sanitizer.bypassSecurityTrustHtml(renderedIcon.html.join('\\n'));\n    }\n  }]);\n\n  return FaIconComponent;\n}();\n\nvar FaDuotoneIconComponent = /*#__PURE__*/function (_FaIconComponent) {\n  _inherits(FaDuotoneIconComponent, _FaIconComponent);\n\n  var _super = _createSuper(FaDuotoneIconComponent);\n\n  function FaDuotoneIconComponent() {\n    _classCallCheck(this, FaDuotoneIconComponent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FaDuotoneIconComponent, [{\n    key: \"findIconDefinition\",\n    value: function findIconDefinition(i) {\n      var definition = _get(_getPrototypeOf(FaDuotoneIconComponent.prototype), \"findIconDefinition\", this).call(this, i);\n\n      if (definition != null && !Array.isArray(definition.icon[4])) {\n        throw new Error('The specified icon does not appear to be a Duotone icon. ' + 'Check that you specified the correct style: ' + \"<fa-duotone-icon [icon]=\\\"['fad', '\".concat(definition.iconName, \"']\\\"></fa-duotone-icon> \") + \"or use: <fa-icon icon=\\\"\".concat(definition.iconName, \"\\\"></fa-icon> instead.\"));\n      }\n\n      return definition;\n    }\n  }, {\n    key: \"buildParams\",\n    value: function buildParams() {\n      var params = _get(_getPrototypeOf(FaDuotoneIconComponent.prototype), \"buildParams\", this).call(this);\n\n      if (this.swapOpacity === true || this.swapOpacity === 'true') {\n        params.classes.push('fa-swap-opacity');\n      }\n\n      if (this.primaryOpacity != null) {\n        params.styles['--fa-primary-opacity'] = this.primaryOpacity.toString();\n      }\n\n      if (this.secondaryOpacity != null) {\n        params.styles['--fa-secondary-opacity'] = this.secondaryOpacity.toString();\n      }\n\n      if (this.primaryColor != null) {\n        params.styles['--fa-primary-color'] = this.primaryColor;\n      }\n\n      if (this.secondaryColor != null) {\n        params.styles['--fa-secondary-color'] = this.secondaryColor;\n      }\n\n      return params;\n    }\n  }]);\n\n  return FaDuotoneIconComponent;\n}(FaIconComponent);\n/**\n * Warns if parent component not existing.\n */\n\n\nvar faWarnIfParentNotExist = function faWarnIfParentNotExist(parent, parentName, childName) {\n  if (!parent) {\n    throw new Error(\"\".concat(childName, \" should be used as child of \").concat(parentName, \" only.\"));\n  }\n};\n/**\n * Fontawesome layers.\n */\n\n\nvar FaLayersComponent = /*#__PURE__*/function () {\n  function FaLayersComponent(renderer, elementRef, config) {\n    _classCallCheck(this, FaLayersComponent);\n\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n    this.config = config;\n  }\n\n  _createClass(FaLayersComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.renderer.addClass(this.elementRef.nativeElement, 'fa-layers');\n      this.fixedWidth = typeof this.fixedWidth === 'boolean' ? this.fixedWidth : this.config.fixedWidth;\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if ('size' in changes) {\n        if (changes.size.currentValue != null) {\n          this.renderer.addClass(this.elementRef.nativeElement, \"fa-\".concat(changes.size.currentValue));\n        }\n\n        if (changes.size.previousValue != null) {\n          this.renderer.removeClass(this.elementRef.nativeElement, \"fa-\".concat(changes.size.previousValue));\n        }\n      }\n    }\n  }]);\n\n  return FaLayersComponent;\n}();\n\nvar FaLayersCounterComponent = /*#__PURE__*/function () {\n  function FaLayersCounterComponent(parent, sanitizer) {\n    _classCallCheck(this, FaLayersCounterComponent);\n\n    this.parent = parent;\n    this.sanitizer = sanitizer;\n    this.classes = [];\n    faWarnIfParentNotExist(this.parent, 'FaLayersComponent', this.constructor.name);\n  }\n\n  _createClass(FaLayersCounterComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes) {\n        var params = this.buildParams();\n        this.updateContent(params);\n      }\n    }\n  }, {\n    key: \"buildParams\",\n    value: function buildParams() {\n      return {\n        title: this.title,\n        classes: this.classes,\n        styles: this.styles\n      };\n    }\n  }, {\n    key: \"updateContent\",\n    value: function updateContent(params) {\n      this.renderedHTML = this.sanitizer.bypassSecurityTrustHtml(counter(this.content || '', params).html.join(''));\n    }\n  }]);\n\n  return FaLayersCounterComponent;\n}();\n\nvar FaLayersTextComponent = /*#__PURE__*/function () {\n  function FaLayersTextComponent(parent, sanitizer) {\n    _classCallCheck(this, FaLayersTextComponent);\n\n    this.parent = parent;\n    this.sanitizer = sanitizer;\n    this.classes = [];\n    faWarnIfParentNotExist(this.parent, 'FaLayersComponent', this.constructor.name);\n  }\n\n  _createClass(FaLayersTextComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes) {\n        var params = this.buildParams();\n        this.updateContent(params);\n      }\n    }\n    /**\n     * Updating params by component props.\n     */\n\n  }, {\n    key: \"buildParams\",\n    value: function buildParams() {\n      var classOpts = {\n        flip: this.flip,\n        spin: this.spin,\n        pulse: this.pulse,\n        border: this.border,\n        inverse: this.inverse,\n        size: this.size || null,\n        pull: this.pull || null,\n        rotate: this.rotate || null,\n        fixedWidth: this.fixedWidth\n      };\n      var parsedTransform = typeof this.transform === 'string' ? parse.transform(this.transform) : this.transform;\n      return {\n        transform: parsedTransform,\n        classes: [].concat(_toConsumableArray(faClassList(classOpts)), _toConsumableArray(this.classes)),\n        title: this.title,\n        styles: this.styles\n      };\n    }\n  }, {\n    key: \"updateContent\",\n    value: function updateContent(params) {\n      this.renderedHTML = this.sanitizer.bypassSecurityTrustHtml(text(this.content || '', params).html.join('\\n'));\n    }\n  }]);\n\n  return FaLayersTextComponent;\n}();\n\nvar FontAwesomeModule = function FontAwesomeModule() {\n  _classCallCheck(this, FontAwesomeModule);\n};\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FaConfig, FaDuotoneIconComponent, FaIconComponent, FaIconLibrary, FaLayersComponent, FaLayersCounterComponent, FaLayersTextComponent, FaStackComponent, FaStackItemSizeDirective, FontAwesomeModule }; //# sourceMappingURL=angular-fontawesome.js.map","map":null,"metadata":{},"sourceType":"module"}