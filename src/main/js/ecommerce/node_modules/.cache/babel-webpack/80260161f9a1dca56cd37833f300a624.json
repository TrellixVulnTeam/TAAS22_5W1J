{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Various HTTP utilities.\n */\n'use strict';\n\nvar Executor = require('./index').Executor,\n    HttpClient = require('./index').HttpClient,\n    HttpRequest = require('./index').Request,\n    Command = require('../lib/command').Command,\n    CommandName = require('../lib/command').Name,\n    error = require('../lib/error'),\n    promise = require('../lib/promise');\n/**\n * Queries a WebDriver server for its current status.\n * @param {string} url Base URL of the server to query.\n * @return {!promise.Promise.<!Object>} A promise that resolves with\n *     a hash of the server status.\n */\n\n\nfunction getStatus(url) {\n  var client = new HttpClient(url);\n  var executor = new Executor(client);\n  var command = new Command(CommandName.GET_SERVER_STATUS);\n  return executor.execute(command);\n} // PUBLIC API\n\n/**\n * Queries a WebDriver server for its current status.\n * @param {string} url Base URL of the server to query.\n * @return {!promise.Promise.<!Object>} A promise that resolves with\n *     a hash of the server status.\n */\n\n\nexports.getStatus = getStatus;\n/**\n * Waits for a WebDriver server to be healthy and accepting requests.\n * @param {string} url Base URL of the server to query.\n * @param {number} timeout How long to wait for the server.\n * @return {!promise.Promise} A promise that will resolve when the\n *     server is ready.\n */\n\nexports.waitForServer = function (url, timeout) {\n  var ready = promise.defer(),\n      start = Date.now();\n  checkServerStatus();\n  return ready.promise;\n\n  function checkServerStatus() {\n    return getStatus(url).then(ready.fulfill, onError);\n  }\n\n  function onError(e) {\n    // Some servers don't support the status command. If they are able to\n    // response with an error, then can consider the server ready.\n    if (e instanceof error.UnsupportedOperationError) {\n      ready.fulfill();\n      return;\n    }\n\n    if (Date.now() - start > timeout) {\n      ready.reject(Error('Timed out waiting for the WebDriver server at ' + url));\n    } else {\n      setTimeout(function () {\n        if (ready.isPending()) {\n          checkServerStatus();\n        }\n      }, 50);\n    }\n  }\n};\n/**\n * Polls a URL with GET requests until it returns a 2xx response or the\n * timeout expires.\n * @param {string} url The URL to poll.\n * @param {number} timeout How long to wait, in milliseconds.\n * @return {!promise.Promise} A promise that will resolve when the\n *     URL responds with 2xx.\n */\n\n\nexports.waitForUrl = function (url, timeout) {\n  var client = new HttpClient(url),\n      request = new HttpRequest('GET', ''),\n      ready = promise.defer(),\n      start = Date.now();\n  testUrl();\n  return ready.promise;\n\n  function testUrl() {\n    client.send(request).then(onResponse, onError);\n  }\n\n  function onError() {\n    if (Date.now() - start > timeout) {\n      ready.reject(Error('Timed out waiting for the URL to return 2xx: ' + url));\n    } else {\n      setTimeout(function () {\n        if (ready.isPending()) {\n          testUrl();\n        }\n      }, 50);\n    }\n  }\n\n  function onResponse(response) {\n    if (!ready.isPending()) return;\n\n    if (response.status > 199 && response.status < 300) {\n      return ready.fulfill();\n    }\n\n    onError();\n  }\n};","map":null,"metadata":{},"sourceType":"script"}