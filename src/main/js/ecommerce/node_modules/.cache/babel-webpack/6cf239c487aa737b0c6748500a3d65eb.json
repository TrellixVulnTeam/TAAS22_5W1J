{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Manages Firefox binaries. This module is considered internal;\n * users should use {@link ./firefox selenium-webdriver/firefox}.\n */\n'use strict';\n\nvar _classCallCheck = require(\"/Users/pier/Desktop/Progetto/taass/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/pier/Desktop/Progetto/taass/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/createClass\").default;\n\nvar child = require('child_process'),\n    fs = require('fs'),\n    path = require('path'),\n    util = require('util');\n\nvar isDevMode = require('../lib/devmode'),\n    promise = require('../lib/promise'),\n    Symbols = require('../lib/symbols'),\n    io = require('../io'),\n    exec = require('../io/exec');\n/** @const */\n\n\nvar NO_FOCUS_LIB_X86 = isDevMode ? path.join(__dirname, '../../../../cpp/prebuilt/i386/libnoblur.so') : path.join(__dirname, '../lib/firefox/i386/libnoblur.so');\n/** @const */\n\nvar NO_FOCUS_LIB_AMD64 = isDevMode ? path.join(__dirname, '../../../../cpp/prebuilt/amd64/libnoblur64.so') : path.join(__dirname, '../lib/firefox/amd64/libnoblur64.so');\nvar X_IGNORE_NO_FOCUS_LIB = 'x_ignore_nofocus.so';\nvar foundBinary = null;\nvar foundDevBinary = null;\n/**\n * Checks the default Windows Firefox locations in Program Files.\n *\n * @param {boolean=} opt_dev Whether to find the Developer Edition.\n * @return {!Promise<?string>} A promise for the located executable.\n *     The promise will resolve to {@code null} if Firefox was not found.\n */\n\nfunction defaultWindowsLocation(opt_dev) {\n  var files = [process.env['PROGRAMFILES'] || 'C:\\\\Program Files', process.env['PROGRAMFILES(X86)'] || 'C:\\\\Program Files (x86)'].map(function (prefix) {\n    if (opt_dev) {\n      return path.join(prefix, 'Firefox Developer Edition\\\\firefox.exe');\n    }\n\n    return path.join(prefix, 'Mozilla Firefox\\\\firefox.exe');\n  });\n  return io.exists(files[0]).then(function (exists) {\n    return exists ? files[0] : io.exists(files[1]).then(function (exists) {\n      return exists ? files[1] : null;\n    });\n  });\n}\n/**\n * Locates the Firefox binary for the current system.\n *\n * @param {boolean=} opt_dev Whether to find the Developer Edition. This only\n *     used on Windows and OSX.\n * @return {!Promise<string>} A promise for the located binary. The promise will\n *     be rejected if Firefox cannot be located.\n */\n\n\nfunction findFirefox(opt_dev) {\n  if (opt_dev && foundDevBinary) {\n    return foundDevBinary;\n  }\n\n  if (!opt_dev && foundBinary) {\n    return foundBinary;\n  }\n\n  var found;\n\n  if (process.platform === 'darwin') {\n    var exe = opt_dev ? '/Applications/FirefoxDeveloperEdition.app/Contents/MacOS/firefox-bin' : '/Applications/Firefox.app/Contents/MacOS/firefox-bin';\n    found = io.exists(exe).then(function (exists) {\n      return exists ? exe : null;\n    });\n  } else if (process.platform === 'win32') {\n    found = defaultWindowsLocation(opt_dev);\n  } else {\n    found = Promise.resolve(io.findInPath('firefox'));\n  }\n\n  found = found.then(function (found) {\n    if (found) {\n      return found;\n    }\n\n    throw Error('Could not locate Firefox on the current system');\n  });\n\n  if (opt_dev) {\n    return foundDevBinary = found;\n  } else {\n    return foundBinary = found;\n  }\n}\n/**\n * Copies the no focus libs into the given profile directory.\n * @param {string} profileDir Path to the profile directory to install into.\n * @return {!promise.Promise.<string>} The LD_LIBRARY_PATH prefix string to use\n *     for the installed libs.\n */\n\n\nfunction installNoFocusLibs(profileDir) {\n  var x86 = path.join(profileDir, 'x86');\n  var amd64 = path.join(profileDir, 'amd64');\n  return mkdir(x86).then(copyLib.bind(null, NO_FOCUS_LIB_X86, x86)).then(mkdir.bind(null, amd64)).then(copyLib.bind(null, NO_FOCUS_LIB_AMD64, amd64)).then(function () {\n    return x86 + ':' + amd64;\n  });\n\n  function mkdir(dir) {\n    return io.exists(dir).then(function (exists) {\n      if (!exists) {\n        return promise.checkedNodeCall(fs.mkdir, dir);\n      }\n    });\n  }\n\n  function copyLib(src, dir) {\n    return io.copy(src, path.join(dir, X_IGNORE_NO_FOCUS_LIB));\n  }\n}\n/**\n * Provides a mechanism to configure and launch Firefox in a subprocess for\n * use with WebDriver.\n *\n * If created _without_ a path for the Firefox binary to use, this class will\n * attempt to find Firefox when {@link #launch()} is called. For OSX and\n * Windows, this class will look for Firefox in the current platform's default\n * installation location (e.g. /Applications/Firefox.app on OSX). For all other\n * platforms, the Firefox executable must be available on your system `PATH`.\n *\n * @final\n */\n\n\nvar Binary = /*#__PURE__*/function (_Symbols$serialize) {\n  /**\n   * @param {string=} opt_exe Path to the Firefox binary to use.\n   */\n  function Binary(opt_exe) {\n    _classCallCheck(this, Binary);\n\n    /** @private {(string|undefined)} */\n    this.exe_ = opt_exe;\n    /** @private {!Array.<string>} */\n\n    this.args_ = [];\n    /** @private {!Object<string, string>} */\n\n    this.env_ = {};\n    Object.assign(this.env_, process.env, {\n      MOZ_CRASHREPORTER_DISABLE: '1',\n      MOZ_NO_REMOTE: '1',\n      NO_EM_RESTART: '1'\n    });\n    /** @private {boolean} */\n\n    this.devEdition_ = false;\n  }\n  /**\n   * Add arguments to the command line used to start Firefox.\n   * @param {...(string|!Array.<string>)} var_args Either the arguments to add\n   *     as varargs, or the arguments as an array.\n   */\n\n\n  _createClass(Binary, [{\n    key: \"addArguments\",\n    value: function addArguments(var_args) {\n      for (var i = 0; i < arguments.length; i++) {\n        if (Array.isArray(arguments[i])) {\n          this.args_ = this.args_.concat(arguments[i]);\n        } else {\n          this.args_.push(arguments[i]);\n        }\n      }\n    }\n    /**\n     * Specifies whether to use Firefox Developer Edition instead of the normal\n     * stable channel. Setting this option has no effect if this instance was\n     * created with a path to a specific Firefox binary.\n     *\n     * This method has no effect on Unix systems where the Firefox application\n     * has the same (default) name regardless of version.\n     *\n     * @param {boolean=} opt_use Whether to use the developer edition. Defaults to\n     *     true.\n     */\n\n  }, {\n    key: \"useDevEdition\",\n    value: function useDevEdition(opt_use) {\n      this.devEdition_ = opt_use === undefined || !!opt_use;\n    }\n    /**\n     * Returns a promise for the Firefox executable used by this instance. The\n     * returned promise will be immediately resolved if the user supplied an\n     * executable path when this instance was created. Otherwise, an attempt will\n     * be made to find Firefox on the current system.\n     *\n     * @return {!promise.Promise<string>} a promise for the path to the Firefox\n     *     executable used by this instance.\n     */\n\n  }, {\n    key: \"locate\",\n    value: function locate() {\n      return promise.fulfilled(this.exe_ || findFirefox(this.devEdition_));\n    }\n    /**\n     * Launches Firefox and returns a promise that will be fulfilled when the\n     * process terminates.\n     * @param {string} profile Path to the profile directory to use.\n     * @return {!promise.Promise<!exec.Command>} A promise for the handle to the\n     *     started subprocess.\n     */\n\n  }, {\n    key: \"launch\",\n    value: function launch(profile) {\n      var env = {};\n      Object.assign(env, this.env_, {\n        XRE_PROFILE_PATH: profile\n      });\n      var args = ['-foreground'].concat(this.args_);\n      return this.locate().then(function (firefox) {\n        if (process.platform === 'win32' || process.platform === 'darwin') {\n          return exec(firefox, {\n            args: args,\n            env: env\n          });\n        }\n\n        return installNoFocusLibs(profile).then(function (ldLibraryPath) {\n          env['LD_LIBRARY_PATH'] = ldLibraryPath + ':' + env['LD_LIBRARY_PATH'];\n          env['LD_PRELOAD'] = X_IGNORE_NO_FOCUS_LIB;\n          return exec(firefox, {\n            args: args,\n            env: env\n          });\n        });\n      });\n    }\n    /**\n     * Returns a promise for the wire representation of this binary. Note: the\n     * FirefoxDriver only supports passing the path to the binary executable over\n     * the wire; all command line arguments and environment variables will be\n     * discarded.\n     *\n     * @return {!promise.Promise<string>} A promise for this binary's wire\n     *     representation.\n     */\n\n  }, {\n    key: _Symbols$serialize,\n    value: function value() {\n      return this.locate();\n    }\n  }]);\n\n  return Binary;\n}(Symbols.serialize); // PUBLIC API\n\n\nexports.Binary = Binary;","map":null,"metadata":{},"sourceType":"script"}