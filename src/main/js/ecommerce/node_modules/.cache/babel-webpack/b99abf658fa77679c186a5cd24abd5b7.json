{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/pier/Desktop/Progetto/taass/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\").default;\n\nvar _classCallCheck = require(\"/Users/pier/Desktop/Progetto/taass/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/pier/Desktop/Progetto/taass/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/createClass\").default;\n\nvar _inherits = require(\"/Users/pier/Desktop/Progetto/taass/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/inherits\").default;\n\nvar _createSuper = require(\"/Users/pier/Desktop/Progetto/taass/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/createSuper\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar semver = require(\"semver\");\n\nvar config_1 = require(\"../config\");\n\nvar config_source_1 = require(\"./config_source\");\n\nvar StandaloneXml = /*#__PURE__*/function (_config_source_1$XmlC) {\n  _inherits(StandaloneXml, _config_source_1$XmlC);\n\n  var _super = _createSuper(StandaloneXml);\n\n  function StandaloneXml() {\n    _classCallCheck(this, StandaloneXml);\n\n    return _super.call(this, 'standalone', config_1.Config.cdnUrls()['selenium']);\n  }\n\n  _createClass(StandaloneXml, [{\n    key: \"getUrl\",\n    value: function getUrl(version) {\n      if (version === 'latest') {\n        return this.getLatestStandaloneVersion();\n      } else {\n        return this.getSpecificStandaloneVersion(version);\n      }\n    }\n  }, {\n    key: \"getVersionList\",\n    value: function getVersionList() {\n      return this.getXml().then(function (xml) {\n        var versionPaths = [];\n\n        var _iterator = _createForOfIteratorHelper(xml.ListBucketResult.Contents),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var content = _step.value;\n            var contentKey = content.Key[0]; // Filter the selenium-server-standalone.\n\n            if (contentKey.includes('selenium-server-standalone')) {\n              versionPaths.push(contentKey);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return versionPaths;\n      });\n    }\n  }, {\n    key: \"getLatestStandaloneVersion\",\n    value: function getLatestStandaloneVersion() {\n      return this.getVersionList().then(function (list) {\n        var standaloneVersion = null;\n        var latest = '';\n        var latestVersion = ''; // Use jar files that are not beta and not alpha versions.\n\n        var jarList = list.filter(function (i) {\n          return i.endsWith('.jar') && !i.includes('beta') && !i.includes('alpha');\n        });\n\n        var _iterator2 = _createForOfIteratorHelper(jarList),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var item = _step2.value;\n            // Get a semantic version.\n            var version = item.split('selenium-server-standalone-')[1].replace('.jar', '');\n\n            if (standaloneVersion == null) {\n              // First time: use the version found.\n              standaloneVersion = version;\n              latest = item;\n              latestVersion = version;\n            } else if (semver.gt(version, standaloneVersion)) {\n              // Get the latest.\n              standaloneVersion = version;\n              latest = item;\n              latestVersion = version;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        return {\n          url: config_1.Config.cdnUrls().selenium + latest,\n          version: latestVersion\n        };\n      });\n    }\n  }, {\n    key: \"getSpecificStandaloneVersion\",\n    value: function getSpecificStandaloneVersion(inputVersion) {\n      return this.getVersionList().then(function (list) {\n        var itemFound = '';\n        var standaloneVersion = null;\n\n        var _iterator3 = _createForOfIteratorHelper(list),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var item = _step3.value;\n            // Get a semantic version.\n            var version = item.split('selenium-server-standalone-')[1].replace('.jar', ''); // Check to see if the specified version matches.\n\n            var firstPath = item.split('/')[0];\n\n            if (version === inputVersion) {\n              // Check if the beta exists that we have the right version\n              // Example: We will see that beta3 appears in the file and path\n              // 3.0-beta3/selenium-server-standalone-3.0.0-beta3.jar\n              // where this should not work:\n              // 3.0-beta2/selenium-server-standalone-3.0.0-beta3.jar\n              if (inputVersion.includes('beta')) {\n                var betaInputVersion = inputVersion.replace('.jar', '').split('beta')[1];\n\n                if (item.split('/')[0].includes('beta' + betaInputVersion)) {\n                  return {\n                    url: config_1.Config.cdnUrls().selenium + item,\n                    version: version\n                  };\n                }\n              } else {\n                return {\n                  url: config_1.Config.cdnUrls().selenium + item,\n                  version: version\n                };\n              }\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      });\n    }\n  }]);\n\n  return StandaloneXml;\n}(config_source_1.XmlConfigSource);\n\nexports.StandaloneXml = StandaloneXml; //# sourceMappingURL=standalone_xml.js.map","map":null,"metadata":{},"sourceType":"script"}