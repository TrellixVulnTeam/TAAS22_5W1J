{"ast":null,"code":"\"use strict\";\n/*\n * Wraps a promised {@link Executor}, ensuring no commands are executed until\n * the wrapped executor has been fully resolved.\n *\n * selenium-webdriver uses this internally, and we overwrite it to give it the\n * defineCommand() function\n *\n * Based off of\n * https://github.com/SeleniumHQ/selenium/blob/master/javascript/node/selenium-webdriver/lib/command.js#L240\n *\n * @implements {Executor}\n */\n\nvar DeferredExecutor = /*@__PURE__*/function () {\n  /**\n   * @param {!Promise<Executor>} delegate The promised delegate, which\n   *     may be provided by any promise-like thenable object.\n   */\n  function DeferredExecutor(delegate) {\n    /** @override */\n    this.execute = function (command) {\n      return delegate.then(function (executor) {\n        return executor.execute(command);\n      });\n    };\n\n    this.defineCommand = function (name, method, path) {\n      delegate.then(function (executor) {\n        executor.defineCommand(name, method, path);\n      });\n    };\n  }\n\n  return DeferredExecutor;\n}();\n\nexports.DeferredExecutor = DeferredExecutor;","map":null,"metadata":{},"sourceType":"script"}