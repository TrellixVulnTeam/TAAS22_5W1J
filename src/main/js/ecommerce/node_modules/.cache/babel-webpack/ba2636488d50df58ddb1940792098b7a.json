{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/pier/Desktop/Progetto/taass/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/pier/Desktop/Progetto/taass/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/createClass\").default;\n\nvar _inherits = require(\"/Users/pier/Desktop/Progetto/taass/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/inherits\").default;\n\nvar _createSuper = require(\"/Users/pier/Desktop/Progetto/taass/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/createSuper\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar config_1 = require(\"../config\");\n\nvar binary_1 = require(\"./binary\");\n\nvar standalone_xml_1 = require(\"./standalone_xml\");\n\nvar Standalone = /*#__PURE__*/function (_binary_1$Binary) {\n  _inherits(Standalone, _binary_1$Binary);\n\n  var _super = _createSuper(Standalone);\n\n  function Standalone(opt_alternativeCdn) {\n    var _this;\n\n    _classCallCheck(this, Standalone);\n\n    _this = _super.call(this, opt_alternativeCdn || config_1.Config.cdnUrls().selenium);\n    _this.configSource = new standalone_xml_1.StandaloneXml();\n    _this.name = 'selenium standalone';\n    _this.versionDefault = Standalone.versionDefault;\n    _this.versionCustom = _this.versionDefault;\n    return _this;\n  }\n\n  _createClass(Standalone, [{\n    key: \"id\",\n    value: function id() {\n      return Standalone.id;\n    }\n  }, {\n    key: \"prefix\",\n    value: function prefix() {\n      return 'selenium-server-standalone-';\n    }\n  }, {\n    key: \"suffix\",\n    value: function suffix() {\n      return '.jar';\n    }\n  }, {\n    key: \"executableSuffix\",\n    value: function executableSuffix() {\n      return '.jar';\n    }\n  }, {\n    key: \"getVersionList\",\n    value: function getVersionList() {\n      // If an alternative cdn is set, return an empty list.\n      if (this.alternativeDownloadUrl != null) {\n        return Promise.resolve([]);\n      } else {\n        return this.configSource.getVersionList();\n      }\n    }\n  }]);\n\n  return Standalone;\n}(binary_1.Binary);\n\nStandalone.id = 'standalone';\nStandalone.isDefault = true;\nStandalone.os = [binary_1.OS.Windows_NT, binary_1.OS.Linux, binary_1.OS.Darwin];\nStandalone.versionDefault = config_1.Config.binaryVersions().selenium;\nexports.Standalone = Standalone; //# sourceMappingURL=standalone.js.map","map":null,"metadata":{},"sourceType":"script"}