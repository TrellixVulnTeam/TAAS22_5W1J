{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/pier/Desktop/Progetto/taass/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/pier/Desktop/Progetto/taass/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/createClass\").default;\n\nvar _inherits = require(\"/Users/pier/Desktop/Progetto/taass/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/inherits\").default;\n\nvar _createSuper = require(\"/Users/pier/Desktop/Progetto/taass/src/main/js/ecommerce/node_modules/@babel/runtime/helpers/createSuper\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * This is an implementation of the Browserstack Driver Provider.\n * It is responsible for setting up the account object, tearing\n * it down, and setting up the driver correctly.\n */\n\nvar https = require(\"https\");\n\nvar q = require(\"q\");\n\nvar util = require(\"util\");\n\nvar exitCodes_1 = require(\"../exitCodes\");\n\nvar logger_1 = require(\"../logger\");\n\nvar driverProvider_1 = require(\"./driverProvider\");\n\nvar logger = new logger_1.Logger('browserstack');\n\nvar BrowserStack = /*#__PURE__*/function (_driverProvider_1$Dri) {\n  _inherits(BrowserStack, _driverProvider_1$Dri);\n\n  var _super = _createSuper(BrowserStack);\n\n  function BrowserStack(config) {\n    _classCallCheck(this, BrowserStack);\n\n    return _super.call(this, config);\n  }\n  /**\n   * Hook to update the BrowserStack job status.\n   * @public\n   * @param {Object} update\n   * @return {q.promise} A promise that will resolve when the update is complete.\n   */\n\n\n  _createClass(BrowserStack, [{\n    key: \"updateJob\",\n    value: function updateJob(update) {\n      var _this = this;\n\n      var deferredArray = this.drivers_.map(function (driver) {\n        var deferred = q.defer();\n        driver.getSession().then(function (session) {\n          var headers = {\n            'Content-Type': 'application/json',\n            'Authorization': 'Basic ' + new Buffer(_this.config_.browserstackUser + ':' + _this.config_.browserstackKey).toString('base64')\n          };\n          var options = {\n            hostname: 'www.browserstack.com',\n            port: 443,\n            path: '/automate/sessions/' + session.getId() + '.json',\n            method: 'GET',\n            headers: headers\n          };\n          var req = https.request(options, function (res) {\n            res.on('data', function (data) {\n              var info = JSON.parse(data.toString());\n\n              if (info && info.automation_session && info.automation_session.browser_url) {\n                logger.info('BrowserStack results available at ' + info.automation_session.browser_url);\n              } else {\n                logger.info('BrowserStack results available at ' + 'https://www.browserstack.com/automate');\n              }\n            });\n          });\n          req.end();\n          req.on('error', function (e) {\n            logger.info('BrowserStack results available at ' + 'https://www.browserstack.com/automate');\n          });\n          var jobStatus = update.passed ? 'completed' : 'error';\n          options.method = 'PUT';\n          var update_req = https.request(options, function (res) {\n            var responseStr = '';\n            res.on('data', function (data) {\n              responseStr += data.toString();\n            });\n            res.on('end', function () {\n              logger.info(responseStr);\n              deferred.resolve();\n            });\n            res.on('error', function (e) {\n              throw new exitCodes_1.BrowserError(logger, 'Error updating BrowserStack pass/fail status: ' + util.inspect(e));\n            });\n          });\n          update_req.write('{\"status\":\"' + jobStatus + '\"}');\n          update_req.end();\n        });\n        return deferred.promise;\n      });\n      return q.all(deferredArray);\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @return {q.promise} A promise which will resolve when the environment is\n     *     ready to test.\n     */\n\n  }, {\n    key: \"setupDriverEnv\",\n    value: function setupDriverEnv() {\n      var deferred = q.defer();\n      this.config_.capabilities['browserstack.user'] = this.config_.browserstackUser;\n      this.config_.capabilities['browserstack.key'] = this.config_.browserstackKey;\n      this.config_.seleniumAddress = 'http://hub.browserstack.com/wd/hub'; // Append filename to capabilities.name so that it's easier to identify\n      // tests.\n\n      if (this.config_.capabilities.name && this.config_.capabilities.shardTestFiles) {\n        this.config_.capabilities.name += ':' + this.config_.specs.toString().replace(/^.*[\\\\\\/]/, '');\n      }\n\n      logger.info('Using BrowserStack selenium server at ' + this.config_.seleniumAddress);\n      deferred.resolve();\n      return deferred.promise;\n    }\n  }]);\n\n  return BrowserStack;\n}(driverProvider_1.DriverProvider);\n\nexports.BrowserStack = BrowserStack; //# sourceMappingURL=browserStack.js.map","map":null,"metadata":{},"sourceType":"script"}