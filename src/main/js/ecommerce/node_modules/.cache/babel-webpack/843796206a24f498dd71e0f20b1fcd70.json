{"ast":null,"code":"var Utils = require(\"../util\"),\n    Constants = Utils.Constants;\n/* The entries in the end of central directory */\n\n\nmodule.exports = function () {\n  var _volumeEntries = 0,\n      _totalEntries = 0,\n      _size = 0,\n      _offset = 0,\n      _commentLength = 0;\n  return {\n    get diskEntries() {\n      return _volumeEntries;\n    },\n\n    set diskEntries(\n    /*Number*/\n    val) {\n      _volumeEntries = _totalEntries = val;\n    },\n\n    get totalEntries() {\n      return _totalEntries;\n    },\n\n    set totalEntries(\n    /*Number*/\n    val) {\n      _totalEntries = _volumeEntries = val;\n    },\n\n    get size() {\n      return _size;\n    },\n\n    set size(\n    /*Number*/\n    val) {\n      _size = val;\n    },\n\n    get offset() {\n      return _offset;\n    },\n\n    set offset(\n    /*Number*/\n    val) {\n      _offset = val;\n    },\n\n    get commentLength() {\n      return _commentLength;\n    },\n\n    set commentLength(\n    /*Number*/\n    val) {\n      _commentLength = val;\n    },\n\n    get mainHeaderSize() {\n      return Constants.ENDHDR + _commentLength;\n    },\n\n    loadFromBinary: function loadFromBinary(\n    /*Buffer*/\n    data) {\n      // data should be 22 bytes and start with \"PK 05 06\"\n      if (data.length != Constants.ENDHDR || data.readUInt32LE(0) != Constants.ENDSIG) throw Utils.Errors.INVALID_END; // number of entries on this volume\n\n      _volumeEntries = data.readUInt16LE(Constants.ENDSUB); // total number of entries\n\n      _totalEntries = data.readUInt16LE(Constants.ENDTOT); // central directory size in bytes\n\n      _size = data.readUInt32LE(Constants.ENDSIZ); // offset of first CEN header\n\n      _offset = data.readUInt32LE(Constants.ENDOFF); // zip file comment length\n\n      _commentLength = data.readUInt16LE(Constants.ENDCOM);\n    },\n    toBinary: function toBinary() {\n      var b = new Buffer(Constants.ENDHDR + _commentLength); // \"PK 05 06\" signature\n\n      b.writeUInt32LE(Constants.ENDSIG, 0);\n      b.writeUInt32LE(0, 4); // number of entries on this volume\n\n      b.writeUInt16LE(_volumeEntries, Constants.ENDSUB); // total number of entries\n\n      b.writeUInt16LE(_totalEntries, Constants.ENDTOT); // central directory size in bytes\n\n      b.writeUInt32LE(_size, Constants.ENDSIZ); // offset of first CEN header\n\n      b.writeUInt32LE(_offset, Constants.ENDOFF); // zip file comment length\n\n      b.writeUInt16LE(_commentLength, Constants.ENDCOM); // fill comment memory with spaces so no garbage is left there\n\n      b.fill(\" \", Constants.ENDHDR);\n      return b;\n    },\n    toString: function toString() {\n      return '{\\n' + '\\t\"diskEntries\" : ' + _volumeEntries + \",\\n\" + '\\t\"totalEntries\" : ' + _totalEntries + \",\\n\" + '\\t\"size\" : ' + _size + \" bytes,\\n\" + '\\t\"offset\" : 0x' + _offset.toString(16).toUpperCase() + \",\\n\" + '\\t\"commentLength\" : 0x' + _commentLength + \"\\n\" + '}';\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}